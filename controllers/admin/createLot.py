import random
from flask import Blueprint, render_template, request, jsonify, make_response
from db import db

from models.user_model.user import User
from models.adminDashboard_model.lotSchema import lotModel
from models.adminDashboard_model.parkingLots import Lot, GeographicalDetail, ParkingSpot
from controllers.middlewares.validate_form import validate_form

from controllers.form.generators import decode_jwt


def random_rating():
    return round(random.uniform(3.0, 5.0), 1)

lot_bp = Blueprint('parkingLot', __name__, url_prefix='/TruLotParking/role/adminDashboard')

@lot_bp.route('/create_parkingLot', methods=['POST'])
@validate_form(lotModel)
def create_parkingLot():
    token = request.cookies.get('token')
    if not token:
        return jsonify({'error': 'Unauthorized: Token missing'}), 401
    
    decoded = decode_jwt(token)
    if not decoded:
        return jsonify({'error': 'Unauthorized: Invalid or expired token'}), 401
    
    email_In_Token = decoded.get('email')
    user = User.query.filter_by(email=email_In_Token).first()

    if user and user.role =='admin':
        try:
            validated_data = request.validated_data

            location = GeographicalDetail.query.filter_by(location=validated_data.location).first()
            if location:
                return jsonify({"success": False, "msg":"Lot is already exist on this location."}), 400
        
            geo_detail = GeographicalDetail(           # create geo-location object
                location=validated_data.location,
                state=validated_data.state,
                country=validated_data.country
            )

            db.session.add(geo_detail)
            db.session.flush()        # So geo_detail.id is available before committing     # db.session.flush() use to get autogenerated values (like id and other attributes) for objects you've just added.

            lot_data = {                       # prepare lot object
                "lot_name": validated_data.lot_name,
                "description": validated_data.description,
                "geographical_id": geo_detail.location_id,  # assuming foreign key relationship
            }

            for field in ["price_per_hr", "capacity", "rating"]:       # adding optional field to the dictionary.
                if field == "rating":
                    value = getattr(validated_data, field, None)
                    if value is not None:
                        lot_data[field] = value
                    else:
                        lot_data[field] = random_rating()
                else:
                    value = getattr(validated_data, field, None)
                    if value is not None:
                        lot_data[field] = value

            
            new_lot = Lot(**lot_data)
            db.session.add(new_lot)
            db.session.flush()

            num_spots = new_lot.capacity if new_lot.capacity else 30
            spots = [
                ParkingSpot(lot_id=new_lot.lot_id)
                for _ in range(num_spots)
            ]
            db.session.add_all(spots)
            db.session.commit()

        except Exception as err:
            print(err)
            return jsonify({"success": False, "msg":"Error in creating parking lot"}), 400
        
        return jsonify({"success": True, "message": "Parking lot created", "lot_id": new_lot.lot_id}), 201
    else:
        return jsonify({"success": False, "msg":"You are not an admin"}), 400


    


