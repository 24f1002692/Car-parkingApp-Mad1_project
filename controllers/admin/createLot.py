import random
from flask import Blueprint, render_template, request, jsonify, make_response
import requests
from db import db

from models.user_model.user import User
from models.adminDashboard_model.lotSchema import lotModel
from models.adminDashboard_model.parkingLots import Lot, GeographicalDetail, ParkingSpot
from controllers.middlewares.validate_form import validate_form
from controllers.admin.generateImages import generate_random_parking_image_url

from controllers.form.generators import decode_jwt


def random_rating():
    return round(random.uniform(3.0, 5.0), 1)

lot_bp = Blueprint('parkingLot', __name__, url_prefix='/TruLotParking/role/adminDashboard')


# -------------------------------------------- get and post for adding lot ----------------------------------------
@lot_bp.route('/addLot')
def addLot():
    token = request.cookies.get('token')
    if not token:
        return jsonify({'error': 'Unauthorized: Token missing'}), 401
    
    decoded = decode_jwt(token)
    if not decoded:
        return jsonify({'error': 'Unauthorized: Invalid or expired token'}), 401
    
    email_In_Token = decoded.get('email')

    try:
        user = User.query.filter_by(email=email_In_Token).first()

        if user and user.role =='admin':
            return render_template('admin/links/addLot.html'), 200
    except Exception as error:
        print(error)
        return jsonify({'error': 'Database Error, while verifying user'}), 400
    


@lot_bp.route('/create_parkingLot', methods=['POST'])
@validate_form(lotModel)
def create_parkingLot():
    token = request.cookies.get('token')
    if not token:
        return jsonify({'error': 'Unauthorized: Token missing'}), 401
    
    decoded = decode_jwt(token)
    if not decoded:
        return jsonify({'error': 'Unauthorized: Invalid or expired token'}), 401
    
    email_In_Token = decoded.get('email')
    user = User.query.filter_by(email=email_In_Token).first()

    if user and user.role =='admin':
        try:
            validated_data = request.validated_data

            location = GeographicalDetail.query.filter_by(location=validated_data.location).first()
            if location:
                return jsonify({"success": False, "msg":"Lot is already exist on this location."}), 400
            
            image_url = generate_random_parking_image_url()
            print(image_url)
        
            geo_detail = GeographicalDetail(           # create geo-location object
                location=validated_data.location,
                state=validated_data.state,
                country=validated_data.country
            )

            db.session.add(geo_detail)
            db.session.flush()        # So geo_detail.id is available before committing     # db.session.flush() use to get autogenerated values (like id and other attributes) for objects you've just added.

            lot_data = {                       # prepare lot object
                "lot_name": validated_data.lot_name,
                "description": validated_data.description,
                "image_url": image_url,
                "geographical_id": geo_detail.location_id,  # assuming foreign key relationship
            }

            for field in ["price_per_hr", "capacity", "rating"]:       # adding optional field to the dictionary.
                if field == "rating":
                    value = getattr(validated_data, field, None)
                    if value is not None:
                        lot_data[field] = value
                    else:
                        lot_data[field] = random_rating()
                else:
                    value = getattr(validated_data, field, None)
                    if value is not None:
                        lot_data[field] = value

            lot_data['available_spots'] = lot_data.get('capacity')
            
            new_lot = Lot(**lot_data)
            db.session.add(new_lot)
            db.session.flush()

            num_spots = new_lot.capacity if new_lot.capacity else 30
            spots = [
                ParkingSpot(lot_id=new_lot.lot_id)
                for _ in range(num_spots)
            ]
            db.session.add_all(spots)
            db.session.commit()

        except Exception as err:
            print(err)
            return jsonify({"success": False, "msg":"Error in creating parking lot"}), 400
        
        alert_message = "Parking lot created successfully!"
        redirect_url = "/TruLotParking/role/adminDashboard"

        html = f"""
        <script>
            alert("{alert_message}");
            window.location.href = "{redirect_url}";
        </script>
        """
        return make_response(html)        
    else:
        return jsonify({"success": False, "msg":"Unauthorised Access"}), 400
    



# ---------------------------------------------------------- view and edit parking details -------------------------------------------

@lot_bp.route('/parking-lot-details')
def parking_lot_details():
    token = request.cookies.get('token')
    if not token:
        return jsonify({'error': 'Unauthorized: Token missing'}), 401
    
    decoded = decode_jwt(token)
    if not decoded:
        return jsonify({'error': 'Unauthorized: Invalid or expired token'}), 401
    
    email_In_Token = decoded.get('email')

    try:
        user = User.query.filter_by(email=email_In_Token).first()

        if user and user.role=='admin':
            lot_id = request.args.get('lot_id')        # Fetches the lot_id value from the query params
            if not lot_id:
                return jsonify({"error" : "Lot ID missing"}), 400

            lot = Lot.query.filter_by(lot_id=lot_id).first()
            if not lot:
                return jsonify({'error' : "Lot not found"}), 404
            
            spots = ParkingSpot.query.filter_by(lot_id=lot_id).all()
            if not spots:
                return jsonify({'error' : 'No spots exists in this lot'}), 404

            return render_template('admin/links/view_lot_details.html', lot=lot, spots=spots)
    except Exception as error:
        print(error)
        return jsonify({'error' : 'Database Error, while verifying user or finding Lot'}), 400
    

@lot_bp.route('/update-parkingLot-form')
def update_parkingLot_form():
    token = request.cookies.get('token')
    if not token:
        return jsonify({'error': 'Unauthorized: Token missing'}), 401
    
    decoded = decode_jwt(token)
    if not decoded:
        return jsonify({'error': 'Unauthorized: Invalid or expired token'}), 401
    
    email_In_Token = decoded.get('email')

    try:
        user = User.query.filter_by(email=email_In_Token).first()

        if user and user.role=='admin':
            lot_id = request.args.get('lot_id')      # Fetches the lot_id value from the query params
            if not lot_id:
                return jsonify({"error" : "Lot ID missing"}), 400

            lot = Lot.query.filter_by(lot_id=lot_id).first()
            if not lot:
                return jsonify({'error' : "Lot not found"}), 404

            return render_template('admin/links/updateLot.html', lot=lot), 200
    except Exception as error:
        print(error)
        return jsonify({'error' : 'Database Error, while verifying user or finding Lot'}), 400
    

@lot_bp.route('/update-parkingLot', methods=['POST'])
@validate_form(lotModel)
def update_parkingLot():
    if request.form.get('_method') != 'PUT':
        return jsonify({'error': 'Method not allowed'}), 405
    
    token = request.cookies.get('token')
    if not token:
        return jsonify({'error': 'Unauthorized: Token missing'}), 401
    
    decoded = decode_jwt(token)
    if not decoded:
        return jsonify({'error': 'Unauthorized: Invalid or expired token'}), 401
    
    email_In_Token = decoded.get('email')

    try:
        user = User.query.filter_by(email=email_In_Token).first()

        if user and user.role =='admin':
            lot_id = request.form.get('lot_id')         # Fetches the lot_id value from form because PUT is not allowed in html forms.
            if not lot_id:
                return jsonify({"error" : "Lot ID missing"}), 400

            lot = Lot.query.filter_by(lot_id=lot_id).first()
            if not lot:
                return jsonify({'error' : "Lot not found"}), 404

            validated_data = request.validated_data
            lot.lot_name = validated_data.lot_name if validated_data.lot_name is not None else lot.lot_name
            lot.description = validated_data.description if validated_data.description is not None else lot.description
            lot.price_per_hr = validated_data.price_per_hr if validated_data.price_per_hr is not None else lot.price_per_hr
            lot.capacity = validated_data.capacity if validated_data.capacity is not None else lot.capacity
            lot.location = validated_data.location if validated_data.location is not None else lot.location
            lot.state = validated_data.state if validated_data.state is not None else lot.state
            lot.country = validated_data.country if validated_data.country is not None else lot.country

            all_spots = ParkingSpot.query.filter_by(lot_id=lot.lot_id).all()
            unoccupied_spots = [spot for spot in all_spots if not spot.occupied]

            if len(all_spots) > lot.capacity:                      # reducing spots if admin wants to reduce the capacity of the lot.
                spots_to_delete = len(all_spots) - lot.capacity
                if len(unoccupied_spots) >= spots_to_delete:
                    for spot in unoccupied_spots[:spots_to_delete]:
                        db.session.delete(spot)
                else:
                    alert_message = "Too many occupied spots. Cannot reduce capacity right now !"
                    redirect_url = "/TruLotParking/role/adminDashboard"

                    html = f"""
                    <script>
                        alert("{alert_message}");
                        window.location.href = "{redirect_url}";
                    </script>
                    """
                    return make_response(html)
                
            elif len(all_spots) < lot.capacity:
                new_spots_needed = lot.capacity - len(all_spots)
                for _ in range(new_spots_needed):
                    new_spot = ParkingSpot(lot_id=lot.lot_id)
                    db.session.add(new_spot)

            lot.available_spots = len([s for s in ParkingSpot.query.filter_by(lot_id=lot.lot_id).all() if not s.occupied and not s.under_maintenance])

            try:
                print('commit before')
                db.session.commit()
                print('commit after')
            except Exception as e:
                db.session.rollback()
                print("COMMIT FAILED:", e)
                return jsonify({'error': 'Database commit failed'}), 500

            alert_message = "Parking lot updated successfully. Redirecting to your admin dashboard... !"
            redirect_url = "/TruLotParking/role/adminDashboard"

            html = f"""
            <script>
                alert("{alert_message}");
                window.location.href = "{redirect_url}";
            </script>
            """
            return make_response(html)        
        else:
            return jsonify({'error': 'Unauthorized access'}), 403
    except Exception as error:
        print(error)
        return jsonify({'error' : 'Database Error, while verifying user or finding Lot'})


# ---------------------------------------------------------------------------------------------------


























































# @lot_bp.route('/validate-location', methods=['POST'])
# def validate_location():
#     data = request.json
#     location = data.get('location')
#     state = data.get('state')
#     country = data.get('country')

#     query = f"{location}, {state}, {country}"
#     url = "https://nominatim.openstreetmap.org/search"

#     try:
#         response = requests.get(url, params={        # sending a get request from flask backend
#             'q': query,
#             'format': 'json'
#         }, headers={
#             'User-Agent': 'TruLotParking/0.1 (shivamkumar987148@gmail.com)'
#         })

#         results = response.json()
#         if results:
#             return jsonify(valid=True, details=results[0])
#         else:
#             return jsonify(valid=False)
#     except Exception as e:
#         return jsonify(error='Something went wrong.'), 500
